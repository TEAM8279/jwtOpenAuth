<?php
declare(strict_types=1);

use App\Application\Actions\User\ListUsersAction;
use App\Application\Actions\User\ViewUserAction;
use App\Object\User;
use Slim\App;
use Slim\Interfaces\RouteCollectorProxyInterface as Group;

return function (App $app) {
    /**
     * @api {post} /login Request for login validation
     * @apiName login
     * @apiGroup login
     *
     * @apiParam {string} mail User mail
     * @apiParam {string} password User password
     *
     * @apiSuccessExample {json} Sucess-Response:
     *      HTTP/1.1 200 OK
     *      {
     *       "id": 1,
     *       "name": "John Doe",
     *       "mail": "johndoe@exemple.com",
     *       "token": "eyJ0eXAiOOiJIUzI1NiJ9.eyJpZCI6IjJtYWlUsiaWF0IjoxNTgxNDE4NTgyfQ.4ip40sLnhgeRDfkhjHVo",
     *       "double-check": false
     *      }
     *
     * @apiError MissingMailOrPassword The mail or the password isn't set in the body
     * @apiError BadEmailFormat The email format isn't the right format
     * @apiError WrongEmailOrPassword The mail or the password isn't right
     *
     */
    $app->post('/login', User::class . ':login');

    /**
     * @api {post} /login/key Request for validate the double check key
     * @apiName key validation
     * @apiGroup login
     *
     * @apiHeaderExample {json} Header-Example:
     *     {
     *       "Authorization": "Bearer [token]"
     *     }
     * @apiParam {number} key generated by the totp app
     *
     * @apiSuccessExample {json} Sucess-Response:
     *      HTTP/1.1 200 OK
     *      {
     *       "id": 1,
     *       "name": "John Doe",
     *       "mail": "johndoe@exemple.com",
     *       "token": "eyJ0eXAiOOiJIUzI1NiJ9.eyJpZCI6IjJtYWlUsiaWF0IjoxNTgxNDE4NTgyfQ.4ip40sLnhgeRDfkhjHVo",
     *       "double-check": true
     *      }
     *
     * @apiError BearerNotSet the bearer is not in the body
     * @apiError InvalidToken the token you try to use is invalid or expired
     * @apiError MissingKey you don't have set the key param in the body
     * @apiError UnsetSecret your secret isn't generated
     * @apiError UnvalidateSecret your secret isn't validate
     * @apiError WrongKey the key you try to use is deprecated
     */
    $app->post('/login/key', User::class . ':loginValidation');

    /**
     * @api {post} /register Request for register an user
     * @apiName register
     * @apiGroup Register
     *
     * @apiParam {string} name name of the new user
     * @apiParam {string} mail mail of the new user
     * @apiParam {string} password password of the new user
     *
     * @apiSuccessExample {json} Sucess-Response:
     *      HTTP/1.1 201 Created
     *      {
     *       "name": "John Doe",
     *       "mail": "johndoe@exemple.com",
     *      }
     *
     * @apiError MissingSomething the name, the mail or the password isn't set in the body
     * @apiError ToShortPassword the password is to short, 8 characters required
     * @apiError BadEmailFormat The email format isn't the right format
     * @apiError AlreadyRegistered your mail address is already registered
     */
    $app->post('/register', User::class . ':register');

    /**
     * @api {post} /totp Request for create the secret
     * @apiName totp
     * @apiGroup totp
     *
     * @apiHeaderExample {json} Header-Example:
     *     {
     *       "Authorization": "Bearer [token]"
     *     }
     *
     * @apiSuccessExample {json} Sucess-Response:
     *      HTTP/1.1 200 OK
     *      {
     *          "id": 1,
     *          "mail": "johndoe@example.com",
     *          "token": "eyiJ9.eyJpZCI6IjG9naW4iOmZhbHNlLC0.urEtyVo7DyUDRA",
     *          "qr_url": "https://chart.googleapis.com/chart",
     *          "secret": "LJHUFUM4BQ4W56YK"
     *      }
     *
     * @apiError MissingSomething the name, the mail or the password isn't set in the body
     * @apiError ToShortPassword the password is to short, 8 characters required
     * @apiError BadEmailFormat The email format isn't the right format
     * @apiError AlreadyRegistered your mail address is already registered
     */
    $app->post('/totp', User::class . ':totp');
    $app->post('/totp/validation', User::class . ':totpV');
    $app->post('/token/check', User::class . ':tokenValidation');
};
